3.Design a CPU scheduling program with C using( First Come First Served )technique with the following considerations. a. All processes are activated at time 0. b. Assume that no process waits on I/O devices

#include <stdio.h>

typedef struct {
    int processID;       // Process ID
    int burstTime;       // Burst time of the process
    int arrivalTime;     // Arrival time of the process
    int waitingTime;     // Waiting time of the process
    int turnaroundTime;  // Turnaround time of the process
    int completionTime;  // Completion time of the process
} Process;

// Function to calculate waiting time, turnaround time, and completion time
void calculateTimes(Process processes[], int n) {
    processes[0].waitingTime = 0;  // First process has 0 waiting time
    processes[0].completionTime = processes[0].burstTime;  // Completion time for first process is its burst time
    processes[0].turnaroundTime = processes[0].burstTime; // Turnaround time for first process is its burst time

    // Calculate times for remaining processes
    for (int i = 1; i < n; i++) {
        // Waiting time for each process is the completion time of the previous process minus arrival time
        processes[i].waitingTime = processes[i - 1].completionTime - processes[i].arrivalTime;
        // Turnaround time is waiting time plus burst time
        processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;
        // Completion time is waiting time plus burst time
        processes[i].completionTime = processes[i].waitingTime + processes[i].burstTime + processes[i].arrivalTime;
    }
}

// Function to calculate average waiting time and turnaround time
void calculateAverages(Process processes[], int n) {
    int totalWaitingTime = 0;
    int totalTurnaroundTime = 0;

    for (int i = 0; i < n; i++) {
        totalWaitingTime += processes[i].waitingTime;
        totalTurnaroundTime += processes[i].turnaroundTime;
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)totalWaitingTime / n);
    printf("Average Turnaround Time: %.2f\n", (float)totalTurnaroundTime / n);
}

// Function to print the process schedule
void printSchedule(Process processes[], int n) {
    printf("\nProcessID\tArrivalTime\tBurstTime\tWaitingTime\tTurnaroundTime\tCompletionTime\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
                processes[i].processID,
                processes[i].arrivalTime,
                processes[i].burstTime,
                processes[i].waitingTime,
                processes[i].turnaroundTime,
                processes[i].completionTime);
    }
}

// Function to sort the processes based on arrival time (ascending order)
void sortByArrival(Process processes[], int n) {
    Process temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].arrivalTime > processes[j].arrivalTime) {
                // Swap the processes
                temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }
}

// Main function to execute the FCFS Scheduling
int main() {
    int n;

    // Get the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    // Input arrival time and burst time for each process
    for (int i = 0; i < n; i++) {
        processes[i].processID = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    // Sort processes based on arrival time
    sortByArrival(processes, n);

    // Calculate waiting time, turnaround time, and completion time for each process
    calculateTimes(processes, n);

    // Print the process schedule
    printSchedule(processes, n);

    // Calculate and print the averages
    calculateAverages(processes, n);

    return 0;
}

3.Construct a scheduling program with C that selects the waiting process with the highest priority to execute next.

#include <stdio.h>
#include <stdlib.h>

// Structure to represent a process
struct Process {
    int id;             // Process ID
    int priority;       // Process priority (lower number means higher priority)
    int burst_time;     // Burst time (time required for execution)
};

// Function to compare two processes based on priority
int compare_priority(const void *a, const void *b) {
    return ((struct Process*)a)->priority - ((struct Process*)b)->priority;
}

// Function to simulate the execution of processes
void schedule_processes(struct Process processes[], int n) {
    // Sort the processes based on priority (highest priority first)
    qsort(processes, n, sizeof(struct Process), compare_priority);

    printf("Scheduling processes based on priority:\n");

    // Simulate the execution of processes
    for (int i = 0; i < n; i++) {
        printf("Executing Process ID: %d with Priority: %d for %d units of time\n",
               processes[i].id, processes[i].priority, processes[i].burst_time);
    }
}

int main() {
    int n;

    // Read the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Read process details
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;  // Assigning unique ID starting from 1
        printf("Enter priority and burst time for Process %d: ", i + 1);
        scanf("%d %d", &processes[i].priority, &processes[i].burst_time);
    }

    // Schedule the processes based on their priority
    schedule_processes(processes, n);

    return 0;
}


